name: CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature*'
      - 'release/**'
      - 'hotfix/**'
    tags:
      - 'v*'

  pull_request:
    branches:
      - develop
      - main  
    types: [opened, synchronize, reopened]

  pull_request_review_comment:
    types: [created]

  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy environment'
        required: true
        default: 'dev'

env:
  NODE_VERSION: '18'  

jobs:
  deploy:
    if: startsWith(github.ref, 'refs/heads/')
    runs-on: self-hosted
    outputs:
      pr_number: ${{ steps.create_pr.outputs.pr_number }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        
      - name: Create PR
        id: create_pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const branch = context.ref.replace("refs/heads/", "");
            const ref = context.ref;
            // Handle only branch refs
            if (!ref.startsWith("refs/heads/")) {
              core.info(`Skipping PR creation because ref is not a branch: ${ref}`);
              return;
            }

            if (branch === "main") {
              core.info("Skipping PR creation for main branch.");
              return;
            }


            // For hotfix â†’ base PR against main (urgent fix)
            let baseBranch = "main";
            let title = branch.startsWith("hotfix") 
              ? `Hotfix: ${branch}` 
              : `Feature: ${branch}`;


            const prs = await github.rest.pulls.list({
              owner,
              repo,
              head: `${owner}:${branch}`,
              base: "main",
              state: "open",
            });

            if (prs.data.length === 0) {
              const pr = await github.rest.pulls.create({
                owner,
                repo,
                base: "main",
                head: branch,
                title: title,
                body: "Auto-created PR for feature/hotfix branch"
              });
              core.setOutput("pr_number", pr.data.number);
            } else {
              core.setOutput("pr_number", prs.data[0].number);
            }

  code-review:
    needs: deploy
    if: startsWith(github.ref, 'refs/heads/')
    runs-on: self-hosted
    steps:
      - name: Checkout PR Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: AI Review with CodeRabbit
        uses: coderabbitai/ai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false

  approve-or-comment:
    needs: deploy
    if: startsWith(github.ref, 'refs/heads/')
    runs-on: self-hosted
    steps:
      - name: Approve if tests passed
        if: needs.deploy.result == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt("${{ needs.deploy.outputs.pr_number }}"),
              event: "APPROVE",
              body: " Tests passed! Auto-approved by CI bot."
            });

      - name: Comment if tests failed
        if: needs.deploy.result == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt("${{ needs.deploy.outputs.pr_number }}"),
              body: " Tests failed. Please check the pipeline logs and fix the issues."
            });

  merge-pr:
    needs: deploy
    if: startsWith(github.ref, 'refs/heads/')
    runs-on: self-hosted
    steps:
      - name: Merge PR
        if: needs.deploy.result == 'success'
        id: merge
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_TOKEN }} 
          script: |
            const prNumber = Number("${{ needs.deploy.outputs.pr_number }}");
            const result = await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              merge_method: "squash"
            });
            core.setOutput("merged", result.data.merged);
    outputs:
      merged: ${{ steps.merge.outputs.merged }}

  deploy-dev:
    runs-on: self-hosted
    if: |
      startsWith(github.ref, 'refs/heads/hotfix/') || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: dev
    steps:
      - uses: actions/checkout@v4
      
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build & Push Image
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/todo:${{ github.sha }}
          docker build -t $IMAGE .
          docker push $IMAGE
      
      - name: Configure Kube
        run: |
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
          kubectl cluster-info
      
      - name: Deploy to Dev
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/todo:${{ github.sha }}
          kubectl create namespace dev --dry-run=client -o yaml | kubectl apply -f -
          for f in k8s/dev/*.yaml; do
            sed "s|todo:.*|$IMAGE|g" $f | kubectl apply -n dev -f -
          done
          kubectl rollout status deployment -n dev todolist

  deploy-qa:
    runs-on: self-hosted
    if: github.ref == 'refs/heads/develop'
    environment: qa
    steps:
      - uses: actions/checkout@v4

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Image
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/todo:${{ github.sha }}
          docker build -t $IMAGE .
          docker push $IMAGE

      - name: Configure Kube
        run: |
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
          kubectl cluster-info

      - name: Deploy to QA
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/todo:${{ github.sha }}
          kubectl create namespace qa --dry-run=client -o yaml | kubectl apply -n qa -f -
          for f in k8s/qa/*.yaml; do
            sed "s|todo:.*|$IMAGE|g" $f | kubectl apply -n qa -f -
          done
          kubectl rollout status deployment -n qa todolist

  deploy-staging:
    runs-on: self-hosted
    if: startsWith(github.ref, 'refs/heads/release-')
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Image
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/todo:${{ github.sha }}
          docker build -t $IMAGE .
          docker push $IMAGE

      - name: Configure Kube
        run: |
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
          kubectl cluster-info

      - name: Deploy to Staging
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/todo:${{ github.sha }}
          kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -n staging -f -
          for f in k8s/staging/*.yaml; do
            sed "s|todo:.*|$IMAGE|g" $f | kubectl apply -n staging -f -
          done
          kubectl rollout status deployment -n staging todolist

  deploy-prod:
    runs-on: self-hosted
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Image
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/todo:${{ github.sha }}
          docker build -t $IMAGE .
          docker push $IMAGE

      - name: Configure Kube
        run: |
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
          kubectl cluster-info

      - name: Deploy to Production
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/todo:${{ github.sha }}
          kubectl create namespace prod --dry-run=client -o yaml | kubectl apply -n prod -f -
          for f in k8s/prod/*.yaml; do
            sed "s|todo:.*|$IMAGE|g" $f | kubectl apply -n prod -f -
          done
          kubectl rollout status deployment -n prod todolist